# Deploy a file to the project's output binary folder.
#
# The binary folder is located at ${MUROOT}/Bin/ and will
# contain the build outputs. This function can be used to copy
# files generated during the build to this directory immediately
# after they have been built.
#
# This function has two signatures:
#
# deploy_binary(<target>
#               [SUFFIX suffix]
#               [NAME name])
#   Deploy an executable target to the binary folder. The target
#   is expected to be an executable added using add_executable,
#   or otherwise a target that has the TARGET_FILE property set.
#   `SUFFIX` arg specifies an additional string appended to the
#   name of the file generated by the target (specified by
#   TARGET_FILE_NAME property).
#   `NAME` can be used to override the entire name of the file
#   in the binary directory. The suffix is not applied when `NAME`
#   is used.
#
# deploy_binary(<target>
#               [GENERATED filename]
#               [SUFFIX suffix]
#               [NAME name])
#   Deploy `filename` generated by `target`. This signature should
#   be used when a file is generated using `add_custom_command`, which
#   does not have an associated TARGET_FILE property. In this case, the
#   `target` should be a custom target that directly depends on the
#   generated file.
#   `SUFFIX` arg specifies an additional string appended to the
#   name of the file.
#   `NAME` can be used to override the entire name of the file
#   in the binary directory. The suffix is not applied when `NAME`
#   is used.
function(deploy_binary target)
    set(options)
    set(oneValueArgs SUFFIX GENERATED NAME)
    set(multiValueArgs)
    cmake_parse_arguments(ARGS "${options}" "${oneValueArgs}" "${multiValueArgs}" ${ARGN})

    if (NOT TARGET "${target}")
        message(FATAL_ERROR "Target ${target} does not exist")
    endif()

    # Relative path to start of repo, will be used for printing
    # progress as well.
    set(BIN_DIR "Bin")
    # Absolute destination directory, used during the actual copy.
    set(OUTPUT_DIR "${CMAKE_SOURCE_DIR}/${BIN_DIR}")
    # Ensure the directory actually exists
    file(MAKE_DIRECTORY "${OUTPUT_DIR}")

    set(FILE_NAME "")
    if (ARGS_GENERATED)
        set(FILE_NAME "${ARGS_GENERATED}")
    else()
        set(FILE_NAME "$<TARGET_FILE_NAME:${target}>")
    endif()
    set(DEPLOYED_SUFFIX "")
    if (ARGS_SUFFIX)
        set(DEPLOYED_SUFFIX "${ARGS_SUFFIX}")
    endif()
    set(DEPLOYED_NAME "${FILE_NAME}${DEPLOYED_SUFFIX}")
    if(ARGS_NAME)
        set(DEPLOYED_NAME "${ARGS_NAME}")
    endif()
    set(DEST "${OUTPUT_DIR}/${DEPLOYED_NAME}")

    set(SRC "")
    if (ARGS_GENERATED)
        set(SRC "${ARGS_GENERATED}")
    else()
        set(SRC "$<TARGET_FILE:${target}>")
    endif()

    # NOTE: Cleanup will work only on ninja/make, see ADDITIONAL_CLEAN_FILES docs.
    set_property(
        DIRECTORY
        PROPERTY ADDITIONAL_CLEAN_FILES "${DEST}"
        )
    add_custom_command(
        TARGET ${target}
        POST_BUILD
        COMMAND ${CMAKE_COMMAND} -E echo \"[deploy] ${target} -> ${BIN_DIR}/${DEPLOYED_NAME}\"
        COMMAND ${CMAKE_COMMAND} -E copy "${SRC}" "${DEST}"
        COMMENT "[deploy] Populating build output directory with artifacts from target ${target}"
        )
endfunction()
