cmake_minimum_required(VERSION 3.17)

find_program(
    BLOATY
    NAMES bloaty
)
if (BLOATY STREQUAL BLOATY-NOTFOUND)
    message(WARNING "Could not find binary for bloaty, binary size stats won't be available.")

    # Provide no-op replacement to avoid manual checks upstream.
    function(bloaty_diff target)
        return()
    endfunction()

    return()
endif ()
message(STATUS "Found bloaty: ${BLOATY}")

function(bloaty_diff target)
    set(CACHE_DIR "${CMAKE_BINARY_DIR}/.bloaty_diff_cache")
    file(MAKE_DIRECTORY "${CACHE_DIR}")
    set(CURRENT_BINARY $<TARGET_FILE:${target}>)
    set(PREVIOUS_BINARY "${CACHE_DIR}/${target}")

    # Generate a CMake script for the target that will run post-build
    set(TARGETSCRIPT "${CACHE_DIR}/BloatyForTarget${target}.cmake")
    file(GENERATE
        OUTPUT "${TARGETSCRIPT}"
        CONTENT
            "# Automatically generated by FindBloaty.cmake for target ${target}
if(EXISTS \"${PREVIOUS_BINARY}\")
    message(STATUS \"[bloaty] Comparing section size between previous and current build of target ${target}\")
    execute_process(COMMAND
        \"${BLOATY}\" -d segments,sections
            \"${CURRENT_BINARY}\"
            --
            \"${PREVIOUS_BINARY}\"
        )

    message(STATUS \"[bloaty] Comparing symbol usage between previous and current build of target ${target}\")
    execute_process(COMMAND
        \"${BLOATY}\" -d symbols
            \"${CURRENT_BINARY}\"
            --
            \"${PREVIOUS_BINARY}\"
        )
endif()
message(STATUS \"[bloaty] Caching output of ${target} for future invocations.\")
file(COPY \"${CURRENT_BINARY}\"
     DESTINATION \"${CACHE_DIR}\")"
        )

    add_custom_command(
        TARGET ${target} POST_BUILD
        COMMAND ${CMAKE_COMMAND} -P "${TARGETSCRIPT}"
        VERBATIM
        )
endfunction()

